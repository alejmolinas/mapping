from __future__ import print_function
import os 
import subprocess
from .pathutils import *
from .opendict import open_dict


__all__= ["manual_map", "final_check"]


INKSCAPE_ARGS =  """--actions=select:svg2; SelectionUnGroup;
SelectionUnGroup; SelectionUnGroup; select-clear; ZoomDrawing; 
select:g4; AlignVerticalHorizontalCenter; select-clear;
"""


def manual_map(glyph_flist, raw_chars, dicturl=None ,verbose=False):
    """
        Open inkscape with the .svg of each character with the appended
        numbers and center the glyph on the page.
        If dicturl is provided as argument, it also opens a browser with
        a chinese dictionary on the glyph to be mapped.

    Parameters
    ----------
    glyph_flist : list of str
        List with the names of the glyphs' .svg files
    raw_chars : list of str
        List with the raw characters to open them in a dictionary
    dicturl : str, optional
        The url of a chinese stroke order dictionary, by default None
    verbose : bool, optional
        Print progress on each character, by default False

    Returns
    -------
    list of str
        List containing all worked glyphs filenames 
    """
    glyphs_len = len(glyph_flist)
    count = 0
    done_glyphs = []

    for glyphf in glyph_flist:
        conv_path = converted_path + glyphf
        
        if os.path.isfile(conv_path):
            # g4 seems to be the id that fontforge assigns to the characters after
            # exporting them as a .svg, I don't know if it can change
            # Recommendation: Check "Zoom when window is resized" option 
            # in inkscape. Edit->Preferences->Windows-> Zoom when window is resized
            open_dict(dicturl, raw_chars[glyph_flist.index(glyphf)])
            finish = subprocess.call(["inkscape", "-g", INKSCAPE_ARGS, conv_path])
            if finish == 0:
                os.rename(conv_path, done_path + glyphf)
                done_glyphs.append(glyphf)
                count += 1
                if verbose:
                    print("Finished {}, {} more to go".format(glyphf,glyphs_len-count),
                        end="\r")
                    os.sys.stdout.flush()
    print("")
    return done_glyphs


def final_check(generated_list, done_list, quiet=False):
    """
        Check wether all glyphs in generated_list were correctly mapped and moved
        to glyphs/done
    Parameters
    ----------
    generated_list : list of str
        List with the filenames of all the glyphs generated by fontforge
    done_list : list of str
        List with the filenames of all the mapped glyphs 
    quiet : bool, optional
        Do not print anything!, by default False
    """
    #TODO: Handle the case when there are still glyphs on /glyphs/converted
    if os.listdir(converted_path) or len(generated_list) != len(done_list):
        for glyphf in generated_list:
            if not os.path.isfile(done_path + glyphf):
                if not quiet:
                    print("{} is missing, please check your converted/done directories"
                    .format(glyphf))
    if not quiet:
        print("Successfully worked on {}/{} of the generated glyphs!".format(len(done_list), len(generated_list)))